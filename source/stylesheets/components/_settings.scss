//
// FOUNDATION SETTINGS
//

// This is the default html and body font-size for the base rem value.
// $rem-base: 16px;

// Allows the use of rem-calc() or lower-bound() in your settings
@import "functions";

/* 
	My custom settings. These variables are copied from _settings.css
	This file will only contain uncommented settings that are actually used in the theme.
*/


// Media Query Ranges
$small-range: (0em, 40em);
$medium-range: (40.063em, 64em);
$large-range: (64.063em, 90em);
$xlarge-range: (90.063em, 120em);
$xxlarge-range: (120.063em);

$screen: "only screen";

$landscape: "#{$screen} and (orientation: landscape)";
$portrait: "#{$screen} and (orientation: portrait)";

$small-up: $screen;
$small-only: "#{$screen} and (max-width: #{upper-bound($small-range)})";

$medium-up: "#{$screen} and (min-width:#{lower-bound($medium-range)})";
$medium-only: "#{$screen} and (min-width:#{lower-bound($medium-range)}) and (max-width:#{upper-bound($medium-range)})";

 $large-up: "#{$screen} and (min-width:#{lower-bound($large-range)})";
$large-only: "#{$screen} and (min-width:#{lower-bound($large-range)}) and (max-width:#{upper-bound($large-range)})";

$xlarge-up: "#{$screen} and (min-width:#{lower-bound($xlarge-range)})";
$xlarge-only: "#{$screen} and (min-width:#{lower-bound($xlarge-range)}) and (max-width:#{upper-bound($xlarge-range)})";

$xxlarge-up: "#{$screen} and (min-width:#{lower-bound($xxlarge-range)})";
$xxlarge-only: "#{$screen} and (min-width:#{lower-bound($xxlarge-range)}) and (max-width:#{upper-bound($xxlarge-range)})";

// Legacy
// $small: $medium-up;
// $medium: $medium-up;
// $large: $large-up;


// Foundation color naming conventions
$white       : #FFFFFF;
$ghost       : #FAFAFA;
$snow        : #F9F9F9;
$vapor       : #F6F6F6;
$white-smoke : #F5F5F5;
$silver      : #EFEFEF;
$smoke       : #EEEEEE;
$gainsboro   : #DDDDDD;
$iron        : #CCCCCC;
$base        : #AAAAAA;
$aluminum    : #999999;
$jumbo       : #888888;
$monsoon     : #777777;
$steel       : #666666;
$charcoal    : #555555;
$tuatara     : #444444;
$oil         : #333333;
$jet         : #222222;
$black       : #000000;

$carrot      : #ff7321;
$dk-carrot   : scale-color($carrot, $lightness: -20%);
$lt-carrot   : scale-color($carrot, $lightness: +20%);

$carrot-green: #5D9E00;
$lt-carrot-green: scale-color($carrot-green, $lightness: +20%);
$dk-carrot-green: scale-color($carrot-green, $lightness: -20%);

$primary-text: #212121;
$secondary-text: #727272;
$divider     : #B6B6B6;
$icon-text   : $white;

// We use these as default colors throughout
$primary-color: $carrot;
$secondary-color: $carrot-green;
$alert-color: #f04124;
$success-color: #43AC6A;
$warning-color: #f08a24;
$info-color: $divider;


// We use these to define default font stacks
$font-family-sans-serif: "Open Sans", Helvetica, Roboto, Arial, sans-serif;
$font-family-serif: Georgia, Cambria, "Times New Roman", Times, serif;
$font-family-monospace: Consolas, "Liberation Mono", Courier, monospace;
$font-family-header: $font-family-sans-serif;

//$font-family-header: "Titillium Web", sans-serif;

// We use these to define default font weights
$font-weight-normal: normal !default;
$font-weight-bold: bold !default;




// We use these to control various global styles
$body-bg: $white;
$body-font-color: $primary-text;
$body-font-family: $font-family-sans-serif;
$body-font-weight: $font-weight-normal;
$body-font-style: normal;
$header-font-weight: 600;
$header-text-rendering: optimizeLegibility;
$topbar-link-weight: bold;
$header-font-family: $font-family-header;
$header-font-color: $secondary-text;
$anchor-font-color: $lt-carrot;
$anchor-font-color-hover: $lt-carrot-green;



// We use these to control header font sizes
$h1-font-size: rem-calc(44);
$h2-font-size: rem-calc(28);
$h3-font-size: rem-calc(24);
$h4-font-size: rem-calc(20);
$h5-font-size: rem-calc(18);
$h6-font-size: 1rem;

//Header font weight
h3, h4, h5, h6{font-weight: 400 !important;}


.full-width-bar {
  background: $lt-carrot;
}


// 34. Top Bar
// - - - - - - - - - - - - - - - - - - - - - - - - -

// $include-html-top-bar-classes: $include-html-classes;

//Background color for the top bar
$topbar-bg-color: $white;
$topbar-bg: $topbar-bg-color;

// Height and margin
$topbar-height: 3rem;
// $topbar-margin-bottom: 0;

// Controlling the styles for the title in the top bar
// $topbar-title-weight: $font-weight-normal;
// $topbar-title-font-size: rem-calc(17);

// Set the link colors and styles for top-level nav
$topbar-link-color: $lt-carrot;
$topbar-link-color-hover: $lt-carrot-green;
$topbar-link-color-active: $dk-carrot;
$topbar-link-color-active-hover: $lt-carrot-green;
// $topbar-link-weight: $font-weight-normal;
// $topbar-link-font-size: rem-calc(13);
// $topbar-link-hover-lightness: -10%; // Darken by 10%
$topbar-link-bg: $topbar-bg;
$topbar-link-bg-hover: $topbar-bg-color;
$topbar-link-bg-color-hover: $divider;
$topbar-link-bg-active: $topbar-bg;
$topbar-link-bg-active-hover: $topbar-bg-color;
// $topbar-link-font-family: $body-font-family;
// $topbar-link-text-transform: none;
// $topbar-link-padding: ($topbar-height / 3);
// $topbar-back-link-size: rem-calc(18);
 $topbar-link-dropdown-padding: 1rem !important;
// $topbar-button-font-size: .75rem;
// $topbar-button-top: 7px;

// Style the top bar dropdown elements
$topbar-dropdown-bg: $white;
$topbar-dropdown-link-color: $topbar-link-color;
$topbar-dropdown-link-color-hover: $topbar-link-color-hover;
$topbar-dropdown-link-bg: $white;
$topbar-dropdown-link-bg-hover: $topbar-bg-color;
$topbar-dropdown-link-weight: $font-weight-bold;
// $topbar-dropdown-toggle-size: 5px;
// $topbar-dropdown-toggle-color: $white;
// $topbar-dropdown-toggle-alpha: .4;

// $topbar-dropdown-label-color: $monsoon;
// $topbar-dropdown-label-text-transform: uppercase;
// $topbar-dropdown-label-font-weight: $font-weight-bold;
// $topbar-dropdown-label-font-size: rem-calc(10);
$topbar-dropdown-label-bg: $white;

// Top menu icon styles
// $topbar-menu-link-transform: uppercase;
// $topbar-menu-link-font-size: rem-calc(13);
// $topbar-menu-link-weight: $font-weight-bold;
$topbar-menu-link-color: $lt-carrot;
$topbar-menu-icon-color: $lt-carrot;
// $topbar-menu-link-color-toggled: $jumbo;
// $topbar-menu-icon-color-toggled: $jumbo;
// $topbar-menu-icon-position: $opposite-direction; // Change to $default-float for a left menu icon

// Transitions and breakpoint styles
// $topbar-transition-speed: 300ms;
// Using rem-calc for the below breakpoint causes issues with top bar
// $topbar-breakpoint: #{lower-bound($medium-range)}; // Change to 9999px for always mobile layout
// $topbar-media-query: "#{$screen} and (min-width:#{lower-bound($topbar-breakpoint)})";

// Top-bar input styles
// $topbar-input-height: rem-calc(28);

// Divider Styles
$topbar-divider-border-bottom: $dk-carrot;
// $topbar-divider-border-top: solid 1px scale-color($topbar-bg-color, $lightness: -50%);

// Sticky Class
$topbar-sticky-class: ".sticky";
// $topbar-arrows: true; //Set false to remove the triangle icon from the menu item
// $topbar-dropdown-arrows: true; //Set false to remove the \00bb >> text from dropdown subnavigation li//
.top-bar-container{border-bottom: 1px solid $divider;}

// Media query breakpoints
$small-breakpoint:  em-calc(640);
$medium-breakpoint: em-calc(1024);
$topbar-breakpoint: em-calc(820);
$large-breakpoint:  em-calc(1440);
$xlarge-breakpoint: em-calc(1920);

// 11. Forms
// - - - - - - - - - - - - - - - - - - - - - - - - -

// $include-html-form-classes: $include-html-classes;

// We use this to set the base for lots of form spacing and positioning styles
// $form-spacing: rem-calc(16);

// We use these to style the labels in different ways
// $form-label-pointer: pointer;
$form-label-font-size: rem-calc(10);
// $form-label-font-weight: $font-weight-normal;
$form-label-line-height: 1;
$form-label-font-color: $white;
// $form-label-small-transform: capitalize;
// $form-label-bottom-margin: 0;
// $input-font-family: inherit;
$input-font-color: $secondary-text;
// $input-font-size: rem-calc(14);
// $input-bg-color: $white;
// $input-focus-bg-color: scale-color($white, $lightness: -2%);
// $input-border-color: scale-color($white, $lightness: -20%);
// $input-focus-border-color: scale-color($white, $lightness: -40%);
// $input-border-style: solid;
// $input-border-width: 1px;
// $input-border-radius: $global-radius;
// $input-disabled-bg: $gainsboro;
// $input-disabled-cursor: $cursor-default-value;
// $input-box-shadow: inset 0 1px 2px rgba(0,0,0,0.1);
// $input-include-glowing-effect: false;

// We use these to style the fieldset border and spacing.
$fieldset-border-style: none;
// $fieldset-border-width: 1px;
// $fieldset-border-color: $gainsboro;
// $fieldset-padding: rem-calc(20);
// $fieldset-margin: rem-calc(18 0);

// We use these to style the legends when you use them
// $legend-bg: $white;
// $legend-font-weight: $font-weight-bold;
// $legend-padding: rem-calc(0 3);

// We use these to style the prefix and postfix input elements
// $input-prefix-bg: scale-color($white, $lightness: -5%);
// $input-prefix-border-color: scale-color($white, $lightness: -20%);
// $input-prefix-border-size: 1px;
// $input-prefix-border-type: solid;
// $input-prefix-overflow: hidden;
// $input-prefix-font-color: $oil;
// $input-prefix-font-color-alt: $white;

// We use this setting to turn on/off HTML5 number spinners (the up/down arrows)
// $input-number-spinners: true;

// We use these to style the error states for inputs and labels
// $input-error-message-padding: rem-calc(6 9 9);
// $input-error-message-top: -1px;
// $input-error-message-font-size: rem-calc(12);
// $input-error-message-font-weight: $font-weight-normal;
// $input-error-message-font-style: italic;
// $input-error-message-font-color: $white;
// $input-error-message-bg-color: $alert-color;
// $input-error-message-font-color-alt: $oil;

// We use this to style the glowing effect of inputs when focused
// $glowing-effect-fade-time: .45s;
// $glowing-effect-color: $input-focus-border-color;

// We use this to style the transition when inputs are focused and when the glowing effect is disabled.
// $input-transition-fade-time: 0.12s;
// $input-transition-fade-timing-function: linear;

// Select variables
// $select-bg-color: $ghost;
// $select-hover-bg-color: scale-color($select-bg-color, $lightness: -3%);

// 18. Off-canvas
// - - - - - - - - - - - - - - - - - - - - - - - - -

// Off Canvas Tab Bar Variables
// $include-html-off-canvas-classes: $include-html-classes;

$tabbar-bg: $white;
// $tabbar-height: rem-calc(45);
// $tabbar-icon-width: $tabbar-height;
// $tabbar-line-height: $tabbar-height;
$tabbar-color: $carrot-green;
// $tabbar-middle-padding: 0 rem-calc(10);

// Off Canvas Divider Styles
$tabbar-left-section-border: solid 1px $lt-carrot;
// $tabbar-right-section-border: $tabbar-left-section-border;


// Off Canvas Tab Bar Headers
$tabbar-header-color: $lt-carrot;
// $tabbar-header-weight: $font-weight-bold;
// $tabbar-header-line-height: $tabbar-height;
// $tabbar-header-margin: 0;

// Off Canvas Menu Variables
// $off-canvas-width: rem-calc(250);
$off-canvas-bg: $white;
// $off-canvas-bg-hover: scale-color($tabbar-bg, $lightness: -30%);
// $off-canvas-bg-active: scale-color($tabbar-bg, $lightness: -30%);

// Off Canvas Menu List Variables
// $off-canvas-label-padding: .3rem rem-calc(15);
$off-canvas-label-color: $lt-carrot;
// $off-canvas-label-text-transform: uppercase;
// $off-canvas-label-font-size: rem-calc(12);
// $off-canvas-label-font-weight: $font-weight-bold;
$off-canvas-label-bg: $white;
$off-canvas-label-border-top: $divider;
// $off-canvas-label-border-bottom: none;
// $off-canvas-label-margin:0;
// $off-canvas-link-padding: rem-calc(10, 15);
$off-canvas-link-color: $lt-carrot;
 $off-canvas-link-border-bottom: 1px solid $divider;
// $off-canvas-back-bg: #444;
// $off-canvas-back-border-top: $off-canvas-label-border-top;
// $off-canvas-back-border-bottom: $off-canvas-label-border-bottom;
// $off-canvas-back-hover-bg: scale-color($off-canvas-back-bg, $lightness: -30%);
// $off-canvas-back-hover-border-top: 1px solid scale-color($off-canvas-label-bg, $lightness: 14%);
// $off-canvas-back-hover-border-bottom: none;

// Off Canvas Menu Icon Variables
$tabbar-menu-icon-color: $lt-carrot;
// $tabbar-menu-icon-hover: scale-color($tabbar-menu-icon-color, $lightness: -30%);

// $tabbar-menu-icon-text-indent: rem-calc(35);
// $tabbar-menu-icon-width: $tabbar-icon-width;
// $tabbar-menu-icon-height: $tabbar-height;
// $tabbar-menu-icon-padding: 0;

// $tabbar-hamburger-icon-width: rem-calc(16);
// $tabbar-hamburger-icon-left: false;
// $tabbar-hamburger-icon-top: false;
// $tabbar-hamburger-icon-thickness: 1px;
// $tabbar-hamburger-icon-gap: 6px;

// Off Canvas Back-Link Overlay
$off-canvas-overlay-transition: background 300ms ease;
$off-canvas-overlay-cursor: pointer;
$off-canvas-overlay-box-shadow: -4px 0 4px rgba($black, .5), 4px 0 4px rgba($black, .5);
$off-canvas-overlay-background: rgba($white, .2);
$off-canvas-overlay-background-hover: rgba($white, .05);

// Transition Variables
$menu-slide: "transform 500ms ease";

// Dropdown

// $include-html-dropdown-classes: $include-html-classes;

// We use these to controls height and width styles.
$f-dropdown-max-width: 500px;
// $f-dropdown-height: auto;
// $f-dropdown-max-height: none;
// $f-dropdown-margin-top: 2px;

// We use this to control the background color
 $f-dropdown-bg: $lt-carrot;

// We use this to set the border styles for dropdowns.
 $f-dropdown-border-style: solid;
 $f-dropdown-border-width: 0px;
// $f-dropdown-border-color: scale-color(#fff, $lightness: -20%);

// We use these to style the triangle pip.
// $f-dropdown-triangle-size: 6px;
// $f-dropdown-triangle-color: #fff;
// $f-dropdown-triangle-side-offset: 10px;

// We use these to control styles for the list elements.
// $f-dropdown-list-style: none;
// $f-dropdown-font-color: #555;
// $f-dropdown-font-size: rem-calc(14);
// $f-dropdown-list-padding: rem-calc(5, 10);
// $f-dropdown-line-height: rem-calc(18);
// $f-dropdown-list-hover-bg: #eeeeee  ;
// $dropdown-mobile-default-float: 0;

// We use this to control the styles for when the dropdown has custom content.
// $f-dropdown-content-padding: rem-calc(20);

// Dropdown Buttons

// $include-html-button-classes: $include-html-classes;

// We use these to set the color of the pip in dropdown buttons
// $dropdown-button-pip-color: #fff;
// $dropdown-button-pip-color-alt: #333;

// $button-pip-tny: rem-calc(6);
// $button-pip-sml: rem-calc(7);
// $button-pip-med: rem-calc(9);
// $button-pip-lrg: rem-calc(11);

// We use these to style tiny dropdown buttons
// $dropdown-button-padding-tny: $button-pip-tny * 7;
// $dropdown-button-pip-size-tny: $button-pip-tny;
// $dropdown-button-pip-opposite-tny: $button-pip-tny * 3;
// $dropdown-button-pip-top-tny: -$button-pip-tny / 2 + rem-calc(1);

// We use these to style small dropdown buttons
// $dropdown-button-padding-sml: $button-pip-sml * 7;
// $dropdown-button-pip-size-sml: $button-pip-sml;
// $dropdown-button-pip-opposite-sml: $button-pip-sml * 3;
// $dropdown-button-pip-top-sml: -$button-pip-sml / 2 + rem-calc(1);

// We use these to style medium dropdown buttons
// $dropdown-button-padding-med: $button-pip-med * 6 + rem-calc(3);
// $dropdown-button-pip-size-med: $button-pip-med - rem-calc(3);
// $dropdown-button-pip-opposite-med: $button-pip-med * 2.5;
// $dropdown-button-pip-top-med: -$button-pip-med / 2 + rem-calc(2);

// We use these to style large dropdown buttons
// $dropdown-button-padding-lrg: $button-pip-lrg * 5 + rem-calc(3);
// $dropdown-button-pip-size-lrg: $button-pip-lrg - rem-calc(6);
// $dropdown-button-pip-opposite-lrg: $button-pip-lrg * 2.5;
// $dropdown-button-pip-top-lrg: -$button-pip-lrg / 2 + rem-calc(3);

// Foundation by ZURB
// foundation.zurb.com
// Licensed under MIT Open Source

@import 'global';

//
// @variables
//
$include-html-button-classes: $include-html-classes !default;

// We use these to build padding for buttons.
$button-tny: rem-calc(10) !default;
$button-sml: rem-calc(14) !default;
$button-med: rem-calc(16) !default;
$button-lrg: rem-calc(18) !default;

// We use this to control the display property.
$button-display: inline-block !default;
$button-margin-bottom: rem-calc(20) !default;

// We use these to control button text styles.
$button-font-family: $body-font-family !default;
$button-font-color: $white !default;
$button-font-color-alt: $oil !default;
$button-font-tny: rem-calc(11) !default;
$button-font-sml: rem-calc(13) !default;
$button-font-med: rem-calc(16) !default;
$button-font-lrg: rem-calc(20) !default;
$button-font-weight: $font-weight-normal !default;
$button-font-align: center !default;

// We use these to control various hover effects.
$button-function-factor: -20% !default;

// We use these to control button border styles.
$button-border-width: 0 !default;
$button-border-style: solid !default;
$button-bg-color: $primary-color !default;
$button-bg-hover: scale-color($button-bg-color, $lightness: $button-function-factor) !default;
$button-border-color: $button-bg-hover !default;
$secondary-button-bg-color: $secondary-color !default;
$secondary-button-bg-hover: scale-color($secondary-color, $lightness: $button-function-factor) !default;
$secondary-button-border-color: $secondary-button-bg-hover !default;
$success-button-bg-color: $success-color !default;
$success-button-bg-hover: scale-color($success-color, $lightness: $button-function-factor) !default;
$success-button-border-color: $success-button-bg-hover !default;
$alert-button-bg-color: $alert-color !default;
$alert-button-bg-hover: scale-color($alert-color, $lightness: $button-function-factor) !default;
$alert-button-border-color: $alert-button-bg-hover !default;
$warning-button-bg-color: $warning-color !default;
$warning-button-bg-hover: scale-color($warning-color, $lightness: $button-function-factor) !default;
$warning-button-border-color: $warning-button-bg-hover !default;
$info-button-bg-color: $info-color !default;
$info-button-bg-hover: scale-color($info-color, $lightness: $button-function-factor) !default;
$info-button-border-color: $info-button-bg-hover !default;

// We use this to set the default radius used throughout the core.
$button-radius: $global-radius !default;
$button-round: $global-rounded !default;

// We use this to set default opacity and cursor for disabled buttons.
$button-disabled-opacity: .7 !default;
$button-disabled-cursor: $cursor-default-value !default;


//
// @MIXIN
//
// We use this mixin to create a default button base.
//
// $style - Sets base styles. Can be set to false. Default: true.
// $display - Used to control display property. Default: $button-display || inline-block

@mixin button-base($style:true, $display:$button-display) {
  @if $style {
    -webkit-appearance: none;
    -moz-appearance: none;
    border-radius:0;
    border-style: $button-border-style;
    border-width: $button-border-width;
    cursor: $cursor-pointer-value;
    font-family: $button-font-family;
    font-weight: $button-font-weight;
    line-height: normal;
    margin: 0 0 $button-margin-bottom;
    position: relative;
    text-align: $button-font-align;
    text-decoration: none;
  }
  @if $display { display: $display; }
}

// @MIXIN
//
// We use this mixin to add button size styles
//
// $padding - Used to build padding for buttons Default: $button-med ||= rem-calc(12)
// $full-width - We can set $full-width:true to remove side padding extend width - Default: false

@mixin button-size($padding:$button-med, $full-width:false) {

  // We control which padding styles come through,
  // these can be turned off by setting $padding:false
  @if $padding {
    padding: $padding ($padding * 2) ($padding + rem-calc(1)) ($padding * 2);
    // We control the font-size based on mixin input.
    @if      $padding == $button-med { font-size: $button-font-med; }
    @else if $padding == $button-tny { font-size: $button-font-tny; }
    @else if $padding == $button-sml { font-size: $button-font-sml; }
    @else if $padding == $button-lrg { font-size: $button-font-lrg; }
  }

  // We can set $full-width:true to remove side padding extend width.
  @if $full-width {
    // We still need to check if $padding is set.
    @if $padding {
      padding-bottom: $padding + rem-calc(1);
      padding-top: $padding;
    } @else if $padding == false {
      padding-bottom:0;
      padding-top:0;
    }
    padding-left: $button-med;
    padding-right: $button-med;
    width: 100%;
  }
}

// @MIXIN
//
// we use this mixin to create the button hover and border colors

// @MIXIN
//
// We use this mixin to add button color styles
//
// $bg - Background color. We can set $bg:false for a transparent background. Default: $primary-color.
// $radius - If true, set to button radius which is $button-radius || explicitly set radius amount in px (ex. $radius:10px). Default: false
// $disabled - We can set $disabled:true to create a disabled transparent button. Default: false
// $bg-hover - Button Hover Background Color. Default: $button-bg-hover
// $border-color - Button Border Color. Default: $button-border-color
@mixin button-style($bg:$button-bg-color, $radius:false, $disabled:false, $bg-hover:null, $border-color:null) {

  // We control which background styles are used,
  // these can be removed by setting $bg:false
  @if $bg {

    @if $bg-hover == null {
      $bg-hover: if($bg == $button-bg-color, $button-bg-hover, scale-color($bg, $lightness: $button-function-factor));
    }

    @if $border-color == null {
      $border-color: if($bg == $button-bg-color, $button-border-color, scale-color($bg, $lightness: $button-function-factor));
    }

    // This find the lightness percentage of the background color.
    $bg-lightness: lightness($bg);
    $bg-hover-lightness: lightness($bg-hover);

    background-color: $bg;
    border-color: $border-color;
    &:hover,
    &:focus { background-color: $bg-hover; }

    // We control the text color for you based on the background color.
    color: if($bg-lightness > 70%, $button-font-color-alt, $button-font-color);

    &:hover,
    &:focus {
      color: if($bg-hover-lightness > 70%, $button-font-color-alt, $button-font-color);
    }
  }

  // We can set $disabled:true to create a disabled transparent button.
  @if $disabled {
    box-shadow: none;
    cursor: $button-disabled-cursor;
    opacity: $button-disabled-opacity;
    &:hover,
    &:focus { background-color: $bg; }
  }

  // We can control how much button radius is used.
  @if $radius == true { @include radius($button-radius); }
  @else if $radius { @include radius($radius); }

}

// @MIXIN
//
// We use this to quickly create buttons with a single mixin. As @jaredhardy puts it, "the kitchen sink mixin"
//
// $padding - Used to build padding for buttons Default: $button-med ||= rem-calc(12)
// $bg - Primary color set in settings file. Default: $button-bg.
// $radius - If true, set to button radius which is $global-radius || explicitly set radius amount in px (ex. $radius:10px). Default:false.
// $full-width - We can set $full-width:true to remove side padding extend width. Default:false.
// $disabled - We can set $disabled:true to create a disabled transparent button. Default:false.
// $is-prefix - Not used? Default:false.
// $bg-hover - Button Hover Color - Default null - see button-style mixin
// $border-color - Button Border Color - Default null - see button-style mixin
// $transition - We can control whether or not to include the background-color transition property - Default:true.
@mixin button($padding:$button-med, $bg:$button-bg-color, $radius:false, $full-width:false, $disabled:false, $is-prefix:false, $bg-hover:null, $border-color:null, $transition: true) {
  @include button-base;
  @include button-size($padding, $full-width);
  @include button-style($bg, $radius, $disabled, $bg-hover, $border-color);

  @if $transition {
    @include single-transition(background-color);
  }
}


@include exports("button") {
  @if $include-html-button-classes {

    // Default styles applied outside of media query
    button, .button {
      @include button-base;
      @include button-size;
      @include button-style;

      @include single-transition(background-color);

      &.secondary { @include button-style($bg:$secondary-button-bg-color, $bg-hover:$secondary-button-bg-hover, $border-color:$secondary-button-border-color); }
      &.success   { @include button-style($bg:$success-button-bg-color, $bg-hover:$success-button-bg-hover, $border-color:$success-button-border-color); }
      &.alert     { @include button-style($bg:$alert-button-bg-color, $bg-hover:$alert-button-bg-hover, $border-color:$alert-button-border-color); }
      &.warning   { @include button-style($bg:$warning-button-bg-color, $bg-hover:$warning-button-bg-hover, $border-color:$warning-button-border-color); }
      &.info      { @include button-style($bg:$info-button-bg-color, $bg-hover:$info-button-bg-hover, $border-color:$info-button-border-color); }

      &.large  { @include button-size($padding:$button-lrg); }
      &.small  { @include button-size($padding:$button-sml); }
      &.tiny   { @include button-size($padding:$button-tny); }
      &.expand { @include button-size($full-width:true); }

      &.left-align  { text-align: left; text-indent: rem-calc(12); }
      &.right-align { text-align: right; padding-right: rem-calc(12); }

      &.radius { @include button-style($bg:false, $radius:true); }
      &.round  { @include button-style($bg:false, $radius:$button-round); }

      &.disabled, &[disabled] { @include button-style($bg:$button-bg-color, $disabled:true, $bg-hover:$button-bg-hover, $border-color:$button-border-color);
        &.secondary { @include button-style($bg:$secondary-button-bg-color, $disabled:true, $bg-hover:$secondary-button-bg-hover, $border-color:$secondary-button-border-color); }
        &.success { @include button-style($bg:$success-button-bg-color, $disabled:true, $bg-hover:$success-button-bg-hover, $border-color:$success-button-border-color); }
        &.alert { @include button-style($bg:$alert-button-bg-color, $disabled:true, $bg-hover:$alert-button-bg-hover, $border-color:$alert-button-border-color); }
        &.warning { @include button-style($bg:$warning-button-bg-color, $disabled:true, $bg-hover:$warning-button-bg-hover, $border-color:$warning-button-border-color); }
        &.info { @include button-style($bg:$info-button-bg-color, $disabled:true, $bg-hover:$info-button-bg-hover, $border-color:$info-button-border-color); }
      }
    }

    //firefox 2px fix
    button::-moz-focus-inner {border:0; padding:0;}

    @media #{$medium-up} {
      button, .button {
        @include button-base($style:false, $display:inline-block);
        @include button-size($padding:false, $full-width:false);
      }
    }
  }
}

// @variables
//

$include-html-form-classes: $include-html-classes !default;

// Controlling background color for the switch container
$switch-bg: $gainsboro !default;

// We use these to control the switch heights for our default classes
$switch-height-tny: 1.5rem !default;
$switch-height-sml: 1.75rem !default;
$switch-height-med: 2rem !default;
$switch-height-lrg: 2.5rem !default;
$switch-bottom-margin: 1.5rem !default;

// We use these to style the switch-paddle
$switch-paddle-bg: $white !default;
$switch-paddle-transition-speed: .15s !default;
$switch-paddle-transition-ease: ease-out !default;
$switch-active-color: $primary-color !default;


//
// @mixins
//

// We use this mixin to create the base styles for our switch element.
//
// $transition-speed - Time in ms for switch to toggle. Default: $switch-paddle-transition-speed.
// $transition-ease - Easing function to use for animation (i.e. ease-out). Default: $switch-paddle-transition-ease.
@mixin switch-base(
  $transition-speed:$switch-paddle-transition-speed,
  $transition-ease:$switch-paddle-transition-ease) {

  border: none;
  margin-bottom: $switch-bottom-margin;
  outline: 0;
  padding: 0;
  position: relative;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;

  // Default label styles for type and transition
  label {
    background: $switch-bg;
    color: $primary-text;
    cursor: pointer;
    display: block;
    margin-bottom: ($switch-height-med / 2);
    position: relative;
    text-indent: 100%;
    width: $switch-height-med * 2; height: $switch-height-med;

    // Transition for the switch label to follow paddle
    @include single-transition(left, $transition-speed, $transition-ease);
  }

  // So that we don't need to recreate the form with any JS, we use the
  // existing checkbox or radio button, but we cleverly position and hide it.
  input {
    left: 10px;
    opacity: 0;
    padding:0;
    position: absolute;
    top: 9px;

    & + label { margin-left: 0; margin-right: 0; }
  }

  // The paddle for the switch is created from an after psuedoclass
  // content element. This is sized and positioned, and reacts to
  // the state of the input.

  label:after {
    background: $switch-paddle-bg;
    content: "";
    display: block;
    height: $switch-height-med - .5rem;
    left: .25rem;
    position: absolute;
    top: .25rem;
    width: $switch-height-med - .5rem;

    -webkit-transition: left $transition-speed $transition-ease;
    -moz-transition: left $transition-speed $transition-ease;
    -o-transition: translate3d(0,0,0);
    transition: left $transition-speed $transition-ease;

    -webkit-transform: translate3d(0,0,0);
    -moz-transform: translate3d(0,0,0);
    -ms-transform: translate3d(0,0,0);
    -o-transform: translate3d(0,0,0);
    transform: translate3d(0,0,0);
  }

  input:checked + label {
    background: $switch-active-color;
  }

  input:checked + label:after {
    left: $switch-height-med + .25rem;
  }
}

// We use this mixin to create the size styles for switches.
//
// $height - Height (in px) of the switch. Default: $switch-height-med.
// $font-size - Font size of text in switch. Default: $switch-font-size-med.
// $line-height - Line height of switch. Default: 2.3rem.
@mixin switch-size($height: $switch-height-med) {

  label {
    height: $height;
    width: $height * 2;
  }

  label:after {
    height: $height - .5rem;
    width: $height - .5rem;
  }

  input:checked + label:after {
    left: $height + .25rem;
  }

}

// We use this mixin to add color and other fanciness to the switches.
//
// $paddle-bg - Background of switch paddle. Default: $switch-paddle-bg.
// $active-color - Background color of positive side of switch. Default: $switch-positive-color.
// $negative-color - Background color of negative side of switch. Default: $switch-negative-color.
// $radius - Radius to apply to switch. Default: false.
// $base-style - Apply base styles? Default: true.
@mixin switch-style(
  $paddle-bg:$switch-paddle-bg,
  $active-color:$switch-active-color,
  $radius:false,
  $base-style:true) {

  @if $base-style {

    label {
      color: $primary-text;
      background: $switch-bg;
    }

    label:after {
      background: $paddle-bg;
    }

    input:checked + label {
      background: $active-color;
    }
  }

  // Setting up the radius for switches
  @if $radius == true {
    label {
      border-radius: 2rem;
    }
    label:after {
      border-radius: 2rem;
    }
  }
  @else if $radius {
    label {
      border-radius: $radius;
    }
    label:after {
      border-radius: $radius;
    }
  }

}

// We use this to quickly create switches with a single mixin
//
// $transition-speed - Time in ms for switch to toggle. Default: $switch-paddle-transition-speed.
// $transition-ease - Easing function to use for animation (i.e. ease-out). Default: $switch-paddle-transition-ease.
// $height - Height (in px) of the switch. Default: $switch-height-med.
// $paddle-bg - Background of switch paddle. Default: $switch-paddle-bg.
// $active-color - Background color of an active switch. Default: $switch-active-color.
// $radius - Radius to apply to switch. Default: false.
// $base-style - Apply base styles? Default: true.
@mixin switch(
  $transition-speed: $switch-paddle-transition-speed,
  $transition-ease: $switch-paddle-transition-ease,
  $height: $switch-height-med,
  $paddle-bg: $switch-paddle-bg,
  $active-color: $switch-active-color,
  $radius:false,
  $base-style:true) {
    @include switch-base($transition-speed, $transition-ease);
    @include switch-size($height);
    @include switch-style($paddle-bg, $active-color, $radius, $base-style);
}

@include exports("switch") {
  @if $include-html-form-classes {
      .switch {
        @include switch;

        // Large radio switches
        &.large { @include switch-size($switch-height-lrg); }

        // Small radio switches
        &.small { @include switch-size($switch-height-sml); }

        // Tiny radio switches
        &.tiny { @include switch-size($switch-height-tny); }

        // Add a radius to the switch
        &.radius {
          label { @include radius(4px); }
          label:after { @include radius(3px); }
        }

        // Make the switch completely round, like a pill
        &.round { @include radius(1000px);
          label { @include radius(2rem); }
          label:after { @include radius(2rem); }
        }

      }
  }
}
